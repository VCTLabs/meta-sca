#!/usr/bin/env python3

# BSD 2-Clause License
#
# Copyright (c) 2020, Konrad Weihmann
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import argparse
import re

from license_expression import Licensing, LicenseSymbol
from csv import DictReader


def create_parser():
    parser = argparse.ArgumentParser(description='License check')
    parser.add_argument("--ignore", default="license,licence,copying,readme",
                        help="Comma seperated list of files to ignore")
    parser.add_argument("license", help="Currently set license")
    parser.add_argument("lcresult", help="Result of lc run")

    return parser.parse_args()


def read_lc_result(args):
    res = []
    ig_pattern = "|".join([x.strip() for x in args.ignore.split(",") if x])
    with open(args.lcresult) as i:
        reader = DictReader(i)
        for row in reader:
            if not re.match(ig_pattern, row["filename"], re.IGNORECASE):
                res.append(row["license"])
    return " AND ".join(res)


if __name__ == '__main__':
    _args = create_parser()
    licensing = Licensing()
    _set = licensing.parse(_args.license).simplify()
    _det = licensing.parse(read_lc_result(_args)).simplify()

    if not licensing.is_equivalent(_set, _det):
        print("Wrong license found. Detected '{}', but set is '{}'".format(
            _det.render(), _set.render()))
