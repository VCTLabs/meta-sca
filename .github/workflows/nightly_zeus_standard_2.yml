name: "[zeus]-scripts"

on:
  schedule:
    - cron: "30 6 * * *"

jobs:
  qemux86:
    name: "build"
    env:
      DISTRO: scatest
      MACHINE: qemux86-64
      SCABRANCH: zeus
      ENABLEMETAOE: 0
      ENABLEMETACLANG: 0
      PARAMFILE: standard_02
      MAXRUNTIME: 12900s
      PYTHONIOENCODING: utf8
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      LANGUAGE: en_US.UTF-8

    runs-on: ubuntu-latest

    container:
      image: privkweihmann/yocto-sca-minimal:latest
      env:
        WORKSPACE: /opt/build
        WEB_REPOSITORY: priv-kweihmann/priv-kweihmann.github.io
      volumes:
        - ${{ github.workspace }}:/opt/build
      options: --privileged

    steps:
      - name: Prep container
        run: |
          sudo sysctl fs.inotify.max_user_watches=524288 2>&1
          sudo chown yoctouser:yoctouser ${WORKSPACE} 2>&1
      - name: Check out poky
        run: |
          git clone git://git.yoctoproject.org/poky.git/ -b $SCABRANCH ${WORKSPACE}/poky 2>&1
          rm -rf ${WORKSPACE}/poky/.git 2>&1
        shell: bash
      - name: Check out meta-sca
        run: |
          git clone https://github.com/priv-kweihmann/meta-sca.git -b $SCABRANCH ${WORKSPACE}/meta-sca 2>&1
          rm -rf ${WORKSPACE}/meta-sca/.git 2>&1
      - if: env.ENABLEMETAOE == '1'
        name: Check out meta-oe
        run: |
          git clone git://git.openembedded.org/meta-openembedded -b $SCABRANCH ${WORKSPACE}/meta-oe 2>&1
          rm -rf ${WORKSPACE}/meta-oe/.git 2>&1
        shell: bash
      - if: env.ENABLEMETACLANG == '1'
        name: Check out meta-clang
        run: |
          git clone https://github.com/kraj/meta-clang.git -b $SCABRANCH ${WORKSPACE}/meta-clang 2>&1
          rm -rf ${WORKSPACE}/meta-clang/.git 2>&1
      - name: Setup poky
        run: |
          cd ${WORKSPACE} 
          source poky/oe-init-build-env 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
        shell: bash
      - name: add meta-sca
        run: |
          cd ${WORKSPACE}
          source poky/oe-init-build-env 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          bitbake-layers add-layer ${WORKSPACE}/meta-sca 2>&1
        shell: bash
      - if: env.ENABLEMETAOE == '1'
        name: add meta-oe
        run: |
          cd ${WORKSPACE}
          source poky/oe-init-build-env 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          bitbake-layers add-layer ${WORKSPACE}/meta-oe/meta-oe 2>&1
        shell: bash
      - if: env.ENABLEMETACLANG == '1'
        name: add meta-clang
        run: |
          cd ${WORKSPACE}
          source poky/oe-init-build-env 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          bitbake-layers add-layer ${WORKSPACE}/meta-clang 2>&1
        shell: bash
      - name: prepare local.conf
        run: |
          cd ${WORKSPACE}
          source poky/oe-init-build-env 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          echo 'INHERIT += "rm_work"' >> conf/local.conf
          echo 'SCA_VERBOSE_OUTPUT = "1"' >> conf/local.conf
          echo 'BB_DISKMON_DIRS = ""' >> conf/local.conf
          echo 'BB_GIT_SHALLOW = "1"' >> conf/local.conf
          echo 'BB_GIT_SHALLOW_DEPTH = "1"' >> conf/local.conf
          echo 'BB_GENERATE_SHALLOW_TARBALLS = "1"' >> conf/local.conf
          echo 'PACKAGE_CLASSES = "package_rpm"' >> conf/local.conf
          sed -i "s/buildstats//g" conf/local.conf
        shell: bash
      - name: set modules
        run: |
          cd ${WORKSPACE}
          source poky/oe-init-build-env 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          mods=$(cat ${WORKSPACE}/meta-sca/test/lang_$PARAMFILE.txt | tr '\n' ' ')
          echo "SCA_AVAILABLE_MODULES = \"${mods}\"" >> conf/local.conf
        shell: bash
      - name: build glibc
        run: |
          cd ${WORKSPACE}
          source poky/oe-init-build-env 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          eval $(bitbake busybox -e | grep "^TMPDIR") && rm -f bitbake.sock && rm -f bitbake.lock
          eval $(bitbake busybox -e | grep "^DL_DIR") && rm -f bitbake.sock && rm -f bitbake.lock
          bitbake glibc 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          [ -n "${DL_DIR}" ] && rm -rf ${DL_DIR}/* 2>&1
          find ${TMPDIR} -type d -name "temp" -exec rm -rf {} \; 2>&1 || true
        shell: bash
      - name: build kernel
        run: |
          cd ${WORKSPACE}
          source poky/oe-init-build-env 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          eval $(bitbake busybox -e | grep "^TMPDIR") && rm -f bitbake.sock && rm -f bitbake.lock
          eval $(bitbake busybox -e | grep "^DL_DIR") && rm -f bitbake.sock && rm -f bitbake.lock
          bitbake linux-yocto 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          [ -n "${DL_DIR}" ] && rm -rf ${DL_DIR}/* 2>&1
          find ${TMPDIR} -type d -name "temp" -exec rm -rf {} \; 2>&1 || true
        shell: bash
      - name: build
        run: |
          cd ${WORKSPACE}
          source poky/oe-init-build-env 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          echo 'INHERIT += "rm_work_and_downloads"' >> conf/local.conf
          eval $(bitbake busybox -e | grep "^TMPDIR") && rm -f bitbake.sock && rm -f bitbake.lock
          bitbake cve-update-db-native -c cleanall || true
          timeout --foreground --kill-after=60s $MAXRUNTIME \
            BUILDNTEST_PRESERVECACHE=1 BUILDNTEST_NOTEST=1 ${WORKSPACE}/meta-sca/test/buildntest \
            $(cat ${WORKSPACE}/meta-sca/test/lang_$PARAMFILE.txt | tr '\n' ' ') 2>&1 \
            || if [ $? == 124 ]; then echo "Timeout"; else exit 1; fi;
          rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
        shell: bash
      - name: test results
        run: |
          cd ${WORKSPACE}
          source poky/oe-init-build-env 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          eval $(bitbake busybox -e | grep "^SCA_EXPORT_DIR") && rm -f bitbake.sock && rm -f bitbake.lock
          eval $(bitbake busybox -e | grep "^TMPDIR") && rm -f bitbake.sock && rm -f bitbake.lock
          find ${TMPDIR} -type f -name "*.dm" 2>&1
          ${WORKSPACE}/meta-sca/test/check_results $SCA_EXPORT_DIR ${WORKSPACE}/meta-sca/test/lang_$PARAMFILE.txt 2>&1
          df -h
          find ${TMPDIR} -type d -maxdepth 1 -mindepth 1 -not -name "deploy" -exec rm -rf {} \; 2>&1
        shell: bash
      - name: get latest webdeloy
        run: |
          cd ${WORKSPACE}
          timeout --foreground --kill-after=60s 300s git clone https://github.com/${WEB_REPOSITORY}.git ${WORKSPACE}/website 2>&1 || exit 0;
        shell: bash
      - name: export findings
        run: |
          cd ${WORKSPACE}
          source poky/oe-init-build-env 2>&1 && rm -f bitbake.sock 2>&1 && rm -f bitbake.lock 2>&1
          eval $(bitbake busybox -e | grep "^SCA_EXPORT_DIR") && rm -f bitbake.sock && rm -f bitbake.lock
          eval $(bitbake busybox -e | grep "^SCA_EXPORT_FINDING_DIR") && rm -f bitbake.sock && rm -f bitbake.lock
          cd ${WORKSPACE}/website
          mkdir -p data/${SCABRANCH}/
          ./tools/report ${SCA_EXPORT_DIR} ${SCA_EXPORT_FINDING_DIR} data/${SCABRANCH}/${PARAMFILE}.json 2>&1
          ./tools/jsonmerge data/${SCABRANCH}/result.json data/${SCABRANCH}/*.json 2>&1
          git add . 2>&1
          git config --local user.email "web@deploy.bot" 2>&1
          git config --local user.name "Webdeploy bot" 2>&1
          git remote rm origin 2>&1
          git remote add origin https://priv-kweihmann:${{ secrets.WEBDEPLOY }}@github.com/${WEB_REPOSITORY}.git 2>&1
          git diff --quiet && git diff --staged --quiet 2>&1 || (git commit --amend -m "Update findings"; git push origin master --force) 2>&1 || true
          rm -rf ${WORKSPACE}/website 2>&1
        shell: bash
