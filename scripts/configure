#! /usr/bin/env python3
## SPDX-License-Identifier: BSD-2-Clause
## Copyright (c) 2019, Konrad Weihmann

import glob
import os
import json
import argparse

class ToolDescriptions(object):

    def __init__(self, rootpath):
        self.__autoValues = {"online": False}
        self.__tools = self.__getTools(rootpath)
    
    def __getTools(self, rootpath):
        data = {}
        for item in glob.glob(os.path.join(rootpath, "**/*.sca.description"), recursive=True):
            k = os.path.basename(item).split(".")[0]
            v = None
            print(item)
            with open(item) as i:
                v = json.load(i)
            for _k, _v in self.__autoValues.items():
                if not _k in v:
                    v[_k] = _v
            data[k] = v
        return data

    def GetTools(self, key, value):
        res = []
        for k, v in self.__tools.items():
            if key in v.keys():
                val = v[key]
                if isinstance(val, list) or isinstance(val, tuple):
                    if value in val:
                        res.append(k)
                elif val == value:
                    res.append(k)
        return sorted(list(set(res)))

    def GetToolsGE(self, key, value):
        res = []
        for k, v in self.__tools.items():
            if key in v.keys():
                val = v[key]
                if isinstance(val, list) or isinstance(val, tuple):
                    res += [x for x in val if x >= value]
                elif val >= value:
                    res.append(k)
        return sorted(list(set(res)))


    def ListTools(self, key):
        res = []
        for k, v in self.__tools.items():
            if key in v.keys():
                val = v[key]
                if isinstance(val, list) or isinstance(val, tuple):
                    res += list(val)
                else:
                    res.append(val)
        return sorted(list(set(res)))
    
    def ListToolsRange(self, key):
        res = []
        for k, v in self.__tools.items():
            if key in v.keys():
                val = v[key]
                if isinstance(val, list) or isinstance(val, tuple):
                    res += list(val)
                else:
                    res.append(val)
        return list(range(min(res), max(res) + 1))
    
    def List(self):
        return json.dumps(self.__tools, indent=4, sort_keys=True)

class InputElement(object):
    def __init__(self, title, dataobj, dataget=None, dataset=None, endkey=None):
        self.__dataget = dataget
        self.__dataset = dataset
        self.__dataobj = dataobj
        self.__title = title
        self.__endkey = endkey
        self.__answer = []
    
    def __get_pdata(self):
        res = []
        _data = self.__dataobj
        if self.__dataget:
            k = list(self.__dataget.keys())[0]
            v = self.__dataget[k]
            _data = getattr(self.__dataobj, k)(v)
        if isinstance(_data, list) or isinstance(_data, tuple):
            for i in _data:
                res.append({"Key": i, "Value": i, "Checked": i in self.__answer})
        elif isinstance(_data, dict):
            for k,v in _data.items():
                res.append({"Key": k, "Value": v, "Checked": v in self.__answer})
        return res

    def __present(self, data):
        os.system("clear")
        print("### {} ###".format(self.__title))
        for item in data:
            _checked = "   "
            if item["Checked"]:
                _checked = " * "
            print("{} [{}] {}".format(_checked, data.index(item), item["Key"]))
        if self.__endkey is not None:
            print("    [{}]: Done".format(self.__endkey))
        return input("Enter a choice: ")


    def Present(self):
        okay = False
        while not okay:
            __data = self.__get_pdata()
            val = self.__present(__data)
            try:
                val = int(val)
            except Exception:
                pass
            if isinstance(val, int):
                if val in range(len(__data)):
                    _val = __data[val]["Value"]
                    if _val in self.__answer:
                        self.__answer.remove(_val)
                    else:
                        self.__answer.append(_val)
            if (self.__endkey is None) or (val == self.__endkey):
                if self.__dataset:
                    k = list(self.__dataset.keys())[0]
                    v = self.__dataset[k]
                    res = []
                    for item in self.__answer:
                        res += getattr(self.__dataobj, k)(v, item)
                    self.__answer = list(set(res))
                return self.__answer

class RawInputElement(object):
    def __init__(self, title, dataobj):
        self.__dataobj = dataobj
        self.__title = title

    def Present(self):
        print("### {} ###".format(self.__title))
        print("    current setting: {}".format(self.__dataobj))
        val = input("Enter a choice: ")
        if val:
            self.__dataobj = val
        return self.__dataobj

def create_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("thisdir", help="path to meta-sca layer, like '/media/foo/meta-sca'")
    x = parser.parse_args()
    if not os.path.isabs(x.thisdir):
        x.thisdir = os.path.abspath(x.thisdir)
    return x


if __name__ == '__main__':
    _args = create_parser()
    _tools = ToolDescriptions(_args.thisdir)

    _questions = {
        "SCA_AVAILABLE_MODULES": [
            InputElement("Do you have online access while building?", dataobj=_tools, dataget={
                         "ListTools": "online"}, dataset={"GetTools": "languages"}),
            InputElement("What content to you want to check?", dataobj=_tools, dataget={
                         "ListTools": "languages"}, dataset={"GetTools": "languages"}, endkey='q'),
            InputElement("What scope of checks would like to perform?", dataobj=_tools, dataget={
                         "ListTools": "scope"}, dataset={"GetTools": "scope"}, endkey='q'),
            InputElement("How fast should the tools be build? [0=slow, 10=instantly]", dataobj=_tools, dataget={
                         "ListToolsRange": "buildspeed"}, dataset={"GetToolsGE": "buildspeed"}),
            InputElement("How fast should the tools be executed? [0=slow, 10=instantly]", dataobj=_tools, dataget={
                         "ListToolsRange": "execspeed"}, dataset={"GetToolsGE": "execspeed"}),
            InputElement("What quality do you expect of the tools? [0=error-prone, 10=always-true]", dataobj=_tools, dataget={
                         "ListToolsRange": "quality"}, dataset={"GetToolsGE": "quality"}),
        ],
        "SCA_AUTO_INH_ON_IMAGE": InputElement("Do you want to check images?", dataobj={"yes": "1", "no": "0"}),
        "SCA_AUTO_INH_ON_RECIPE": InputElement("Do you want to check recipes?", dataobj={"yes": "1", "no": "0"}),
        "SCA_WARNING_LEVEL": InputElement("From which priority on the findings should be reported?", dataobj=["error", "warning", "info"]),
        "SCA_ENABLE_IMAGE_SUMMARY": InputElement("Do you want to use image summary functionality?", dataobj={"yes": "1", "no": "0"}),
        "SCA_ENABLE_BESTOF": InputElement("Do you want to use best-of functionality?", dataobj={"yes": "1", "no": "0"}),
        "SCA_AUTO_LICENSE_FILTER": RawInputElement("Enter a license filter", dataobj=".*"),
        "SCA_EXPORT_FINDING_SRC": InputElement("Do you want export the findings to Jenkins?", dataobj={"yes": "1", "no": "0"}),
        "SCA_TRACEFILES_MODE": InputElement("What kind input files should be considered?", 
                                            dataobj={
                                                "All": "full", 
                                                "Only things deployed to the image": "strict", 
                                                "Deployed and a few support files": "loose"}
                                           ),
        "SCA_SPARE_LAYER": RawInputElement("Name the layers which should NOT be checked (e.g. core). Use spaces for seperating multiple items", dataobj=""),
        "SCA_BACKTRACK": InputElement("Do you want findings from image being tracked back to their original recipes?", dataobj={"yes": "1", "no": "0"}),
        "SCA_VERBOSE_OUTPUT": InputElement("Enable verbose console output?", dataobj={"yes": "1", "no": "0"}),
    }
    _data = {

    }
    for k,v in sorted(_questions.items()):
        val = []
        if isinstance(v, list):
            for vv in v:
                nval = vv.Present()
                if val:
                    val = [x for x in nval if x in val]
                else:
                    val = nval
        else:
            val = v.Present()
        if isinstance(val, list):
            _data[k] = " ".join(sorted(val))
        else:
            _data[k] = val
    os.system("clear")
    print("### Summary: Insert this into your local.conf or distro.conf ####")
    for k,v in sorted(_data.items()):
        print("{} = \"{}\"".format(k, v))
