#!/usr/bin/env python3
import argparse
import re
from operator import itemgetter

import github3

class ExtendAction(argparse.Action):

    def __call__(self, parser, namespace, values, option_string=None):
        items = getattr(namespace, self.dest) or []
        items.extend(values)
        setattr(namespace, self.dest, items)


def create_parser():
    parser = argparse.ArgumentParser()

    parser.register('action', 'extend', ExtendAction)

    parser.add_argument("--main", default=[], nargs="*", action="extend", help="add a main section entry")
    parser.add_argument("branch", help="branch to query")
    parser.add_argument("tag", help="tag to query from")
    parser.add_argument("username", help="GitHub username")
    parser.add_argument("token", help="GitHub token")
    return parser.parse_args()


def get_commits(_args):
    login = github3.login(_args.username, _args.token)
    repo = login.repository('priv-kweihmann', 'meta-sca')
    branch = repo.branch(_args.branch)
    _lastsha = branch.commit.sha
    res = []
    for tag in repo.tags():
        if tag.name == _args.tag:
            _tmp = repo.compare_commits(tag.commit.sha, _lastsha).commits
            res += [x for x in _tmp]
            while len(_tmp) >= 250:
                _tmp = repo.compare_commits(tag.commit.sha, _tmp[0].sha).commits
                res += [x for x in _tmp]
            return res
    return []


def get_issues_from_commits(_args, commits):
    res = set()
    for c in commits:
        if any([x for x in commits if "This reverts commit {}".format(c.sha) in x.message]):
            continue
        m = re.search(r"Closes #(?P<id>\d+)", c.message)
        if m:
            res.add(int(m.group("id")))
        m = re.search(r"Fixes #(?P<id>\d+)", c.message)
        if m:
            res.add(int(m.group("id")))
        m = re.search(r"Relates to #(?P<id>\d+)", c.message)
        if m:
            res.add(int(m.group("id")))
    return list(res)


def get_issues(_args):
    login = github3.login(_args.username, _args.token)
    repo = login.repository('priv-kweihmann', 'meta-sca')
    return repo.issues(state="closed")


section_map = {
    "new": ["FEATURE REQUEST"],
    "fixes": ["BUG"],
    "misc": ["ENHANCEMENT"],
    "updates": ["PACKAGE UPDATE"],
    "deprecation": ["DEPRECATION"]
}

content_map = {
    "main": { "index": 0, "title": "Main features", "content": "" },
    "new": { "index": 1, "title": "New", "content": "" },
    "deprecation": { "index": 2, "title": "Deprecations", "content": "" },
    "updates": { "index": 3, "title": "Updates", "content": "" },
    "fixes": { "index": 4, "title": "Bugfixes", "content": "" },
    "misc": { "index": 5, "title": "Misc", "content": "" },
    "thanks": { "index": 6, "title": "Thanks to", "content": "" },
}

def __gen_section(id, _list):
    global content_map
    if id in content_map and _list:
        content_map[id]["content"] = "\n".join(["- {}".format(x) for x in sorted(_list)])
    
def __gen_main_section(args):
    global content_map
    content_map["main"]["content"] = "\n".join(["- {}".format(x) for x in sorted(args.main)])

def __gen_thanks_section(args, _list):
    global content_map
    content_map["thanks"]["content"] = "\n".join(["- @{}".format(x) for x in sorted(_list)])

if __name__ == '__main__':
    _args = create_parser()
    _commitids = get_issues_from_commits(_args, get_commits(_args))
    _ids = [x for x in get_issues(_args) if x.number in _commitids]
    _thanks = [x.user.login for x in get_issues(_args) if x.user.login != _args.username and x.number in _commitids]

    template = ""

    # build sections from arguments
    __gen_main_section(_args)
    
    # other sections
    __gen_thanks_section(_args, _thanks)

    # build sections from github info
    for k, v in section_map.items():
        _id_map = []
        for label in v:
            for i in _ids:
                _labels = [str(x).upper() for x in i.original_labels if str(x) not in [
                    "Staging", "Update Bot"]]
                if label in _labels:
                    _id_map.append("#{} - {} - {}".format(i.number, i.title.strip(),
                                                          ",".join(_labels)))
        __gen_section(k, _id_map)
    for v in sorted(content_map.values(), key=itemgetter("index")):
        if v["content"]:
            template += "# {}\n\n".format(v["title"])
            template += "{}\n\n".format(v["content"])

    print(template)
